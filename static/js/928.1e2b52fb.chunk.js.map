{"version":3,"file":"static/js/928.1e2b52fb.chunk.js","mappings":"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","sources":["hooks/useSessionStorage.js","utils/numToWord.js","hooks/useHandleDecodingLogic.js","hooks/useSpeechRecognition.js","hooks/useAudioVisualizer.js","components/AudioVisualizer.jsx","components/ProgressBar.jsx","pages/Decoding/Decoding.jsx","hooks/useCountdown.js","hooks/useRequestMicPermission.js","../node_modules/num-words/index.js"],"sourcesContent":["import { useState } from 'react';\n\nexport const useSessionStorage = (key, initialValue) => {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = () => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      const item = window.sessionStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading sessionStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  };\n\n  const [storedValue, setStoredValue] = useState(readValue);\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to sessionStorage.\n  const setValue = (value) => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window == 'undefined') {\n      console.warn(\n        `Tried setting sessionStorage key “${key}” even though environment is not a client`\n      );\n    }\n\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value;\n\n      // Save to local storage\n      window.sessionStorage.setItem(key, JSON.stringify(newValue));\n\n      // Save state\n      setStoredValue(newValue);\n\n      // We dispatch a custom event so every useSessionStorage hook are notified\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting sessionStorage key “${key}”:`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","import numWords from 'num-words';\n\nconst convertNumberToWords = (input) => {\n  return input.replace(/\\d+/g, (number) => numWords(number));\n};\n\nexport default convertNumberToWords;","import { useState, useEffect, useCallback } from 'react';\nimport { useSpeechRecognition } from './useSpeechRecognition';\nimport convertNumberToWords from '../utils/numToWord';\nimport { useNavigate } from 'react-router-dom';\nimport { useSessionStorage } from './useSessionStorage';\n\nexport const useHandleDecodingLogic = ({ startCountdown, \n                                            countdownPromise,\n                                            setSpeechResultReceived,\n                                            setRetryMessage,\n                                            isPaused,\n                                            setButtonActive  }) => {\n    const navigate = useNavigate();\n    const [testWords, setTestWords] = useSessionStorage('testWords', '');\n    const [wordIndex, setWordIndex] = useSessionStorage('wordIndex', 0);\n    const [levelIndex, setLevelIndex] = useSessionStorage('levelIndex', 0);\n    const [correct, setCorrect] = useSessionStorage('correct', 0);\n    const [wrong, setWrong] = useSessionStorage('wrong', 0);\n    const [wrongAboveCurrentLevel, setWrongAboveCurrentLevel] = useSessionStorage('wrongAboveCurrentLevel', 0);\n    const [frozenWrongAboveCurrentLevel, setFrozenWrongAboveCurrentLevel] = useSessionStorage('frozenWrongAboveCurrentLevel', false);\n    const [isLastWord, setIsLastWord] = useSessionStorage('isLastWord', false);\n    const [readingLevel, setReadingLevel] = useSessionStorage('readingLevel', null);\n    const [currentLevel, setCurrentLevel] = useState(testWords[levelIndex].level);\n    const [words, setWords] = useState(Object.keys(testWords[levelIndex].words));\n    const [currentWord, setCurrentWord] = useState(words[wordIndex]);\n    const lastLevelIndex = testWords.length - 1;\n    const lastWordIndex = Object.keys(testWords[lastLevelIndex].words).length - 1;\n    const speechRecognition = useSpeechRecognition();\n    const totalWords = testWords.reduce((total, level) => total + Object.keys(level.words).length, 0);\n    const progress = ((levelIndex * words.length) + wordIndex) / totalWords * 100;\n\n    let speechResult;\n\n    const nextDecodingWord = async () => {\n        speechRecognition.stopSpeechRecognition();\n        setButtonActive(false);\n        setSpeechResultReceived(false);\n        setRetryMessage('');\n\n        try {\n            startCountdown(3);\n            const speechRecognitionPromise = speechRecognition.recognizeSpeech();\n            const [speechReturn] = await Promise.all([speechRecognitionPromise, countdownPromise]);\n            setSpeechResultReceived(true);\n            speechResult = convertNumberToWords(speechReturn).toLowerCase();\n            console.log('Speech result:', speechResult);\n        } catch (error) {\n            console.error('Speech recognition error:', error);\n            return;\n        }\n\n        let isCorrect;\n        if (currentWord === 'clique') {\n            isCorrect = speechResult === 'click' || speechResult === 'clique'\n        } else if (currentWord === 'know') {\n            isCorrect = speechResult === 'no' || speechResult === 'know'\n        } else if (currentWord === 'could') {\n            isCorrect = speechResult === 'could' || speechResult === \"couldn't\"\n        } else if (currentWord === 'meadow') {\n            isCorrect = speechResult === 'metal' || speechResult === 'meadow'\n        } else if (currentWord === 'glisten') {\n            isCorrect = speechResult === 'listen' || speechResult === 'glisten'\n        } else if (currentWord === 'toughen') {\n            isCorrect = speechResult === 'toughen' || speechResult === 'puffin'\n        } else if (currentWord === 'islet') {\n            isCorrect = speechResult === 'eyelet' || speechResult === 'islet'\n        } else if (currentWord === 'leitmotif') {\n            isCorrect = speechResult === 'leitmotiv' || speechResult === 'leitmotif'\n        } else {\n            isCorrect = speechResult === currentWord;\n        }\n        const updatedCorrect = isCorrect ? correct + 1 : correct;\n        const updatedWrong = !isCorrect ? wrong + 1 : wrong;\n        const lastWordReached = levelIndex === lastLevelIndex && wordIndex === lastWordIndex;\n\n        setIsLastWord(lastWordReached);\n        setCorrect(updatedCorrect);\n        setWrong(updatedWrong);\n        setWrongAboveCurrentLevel((prevWrongAboveCurrentLevel) => {\n            if (!frozenWrongAboveCurrentLevel && !isCorrect) {\n            return prevWrongAboveCurrentLevel + 1;\n            } else {\n            return prevWrongAboveCurrentLevel;\n            }\n        });\n        setWordIndex((prevState) => prevState + 1);\n        testWords[levelIndex].words[currentWord] = isCorrect;\n    };\n  \n    useEffect(() => {\n        setCurrentLevel(testWords[levelIndex].level);\n        setWords((prevWords) => {\n        const newWords = Object.keys(testWords[levelIndex].words);\n        setCurrentWord(newWords[wordIndex]);\n        return newWords;\n        });\n    }, [levelIndex, wordIndex, testWords]);\n\n\n    const handleLogic = useCallback(() => {\n        if (testWords[levelIndex] && correct >= words.length / 2) {\n          setReadingLevel(testWords[levelIndex].level);\n          setWrongAboveCurrentLevel(0);\n          setFrozenWrongAboveCurrentLevel(true);\n        }\n    \n        if (wrong >= words.length / 2 && wrongAboveCurrentLevel >= words.length && wordIndex >= words.length) {\n          setTestWords(testWords);\n          navigate('/eidetic');;\n        }\n    \n        if (isLastWord) {\n            navigate('/completed');\n        }\n      }, [correct, levelIndex, isLastWord, navigate, wrongAboveCurrentLevel, wordIndex, wrong, words, testWords, setTestWords, setFrozenWrongAboveCurrentLevel, setReadingLevel, setWrongAboveCurrentLevel]);\n    \n      useEffect(() => {\n        handleLogic();\n      }, [handleLogic]);\n    \n      useEffect(() => {\n        if (wordIndex >= lastWordIndex + 1) {\n          if (levelIndex < testWords.length - 1) {\n            setLevelIndex((prevState) => (prevState + 1 ));\n            setFrozenWrongAboveCurrentLevel(false);\n            setWrongAboveCurrentLevel(0);\n          }\n          setCorrect(0)\n          setWrong(0);\n          setWordIndex(0)\n        }\n      }, [wordIndex, levelIndex, lastWordIndex, testWords, setCorrect, setFrozenWrongAboveCurrentLevel, setLevelIndex, setWordIndex, setWrong, setWrongAboveCurrentLevel]);\n    \n      useEffect(() => {\n        console.log(`current word: ${words[wordIndex]} word index: ${wordIndex}, grade index: ${levelIndex}, \n                    grade level: ${currentLevel}, correct: ${correct}, wrong: ${wrong}, \n                    wrong above grade level: ${wrongAboveCurrentLevel}, reading level: ${readingLevel}\n                    is_paused: ${isPaused}`);\n      }, [words, wordIndex, levelIndex, currentLevel, correct, wrong, wrongAboveCurrentLevel, readingLevel, isPaused]);\n\n    return [nextDecodingWord, currentWord, isLastWord, progress];\n};\n\n\n","import { useEffect, useRef, useMemo } from 'react';\n\nexport const useSpeechRecognition = () => {\n  const recognition = useRef(null);\n\n  useEffect(() => {\n    if (!recognition.current) {\n      recognition.current = new (window.SpeechRecognition ||\n        window.webkitSpeechRecognition ||\n        window.mozSpeechRecognition ||\n        window.msSpeechRecognition)();\n\n      recognition.current.continuous = false;\n      recognition.current.lang = 'en-US';\n      recognition.current.interimResults = false;\n      recognition.current.maxAlternatives = 1;\n    }\n  }, []);\n\n  const recognizeSpeech = () => {\n    return new Promise((resolve, reject) => {\n      if (!recognition.current) {\n        reject(new Error('SpeechRecognition not available'));\n        return;\n      }\n\n      recognition.current.onresult = (event) => {\n        const speechResult = event.results[0][0].transcript;\n        resolve(speechResult);\n      };\n\n      recognition.current.onerror = (event) => {\n        reject(event.error);\n      };\n      \n      recognition.current.start();\n    });\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognition.current) {\n      recognition.current.stop();\n    }\n  };\n\n  const speechRecognition = useMemo(() => ({\n    recognizeSpeech,\n    stopSpeechRecognition,\n  }), []);\n\n  return speechRecognition;\n};","import { useState, useEffect, useRef } from 'react';\n\nexport const useAudioVisualizer = (canvasRef, countdownValue) => {\n  const [analyser, setAnalyser] = useState(null);\n  const animationFrameRef = useRef(null);\n  const [stream, setStream] = useState(null);\n\n  useEffect(() => {\n    const getAudioContext = async () => {\n      console.log('Getting audio context...');\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const newAnalyser = audioContext.createAnalyser();\n      setAnalyser(newAnalyser);\n\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        console.log('Got audio stream:', stream);\n        setStream(stream);\n        const source = audioContext.createMediaStreamSource(stream);\n        source.connect(newAnalyser);\n      } catch (error) {\n        console.error('Error getting audio stream:', error);\n      }\n    };\n\n    if (!analyser) {\n      getAudioContext();\n    }\n  }, [analyser]);\n\n  useEffect(() => {\n    return () => {\n      console.log('Cleaning up audio stream...');\n      if (stream) {\n        const audioTracks = stream.getAudioTracks();\n        audioTracks.forEach((track) => track.stop());\n      }\n    };\n  }, [stream]);\n\n  const draw = () => {\n    console.log('Drawing...');\n    if (!canvasRef.current || !analyser) return;\n    const canvasContext = canvasRef.current.getContext('2d');\n    const dataArray = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(dataArray);\n  \n    canvasContext.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  \n    const radius = Math.min(canvasRef.current.width, canvasRef.current.height) / 2;\n    const centerX = canvasRef.current.width / 2;\n    const centerY = canvasRef.current.height / 2;\n    const numBars = dataArray.length;\n    const angleBetweenBars = (2 * Math.PI) / numBars;\n  \n    for (let i = 0; i < numBars; i+=5) {\n      // let barHeight;\n      // if (Math.random() < 0.8) { // 80% of the time, use correct index\n      //   barHeight = dataArray[i] * 1;\n      // } else { // 20% of the time, use random index\n      //   const randomIndex = Math.floor(Math.random() * dataArray.length);\n      //   barHeight = dataArray[randomIndex]/2;\n      // }\n      const barHeight = dataArray[i] / 1.5;\n      const barWidth = 4;\n      const angle = i * angleBetweenBars;\n      const x1 = centerX + Math.cos(angle) * (radius - barHeight);\n      const y1 = centerY + Math.sin(angle) * (radius - barHeight);\n      const x2 = centerX + Math.cos(angle) * radius;\n      const y2 = centerY + Math.sin(angle) * radius;\n  \n      canvasContext.beginPath();\n      canvasContext.lineWidth = barWidth;\n      // const colorValue = dataArray[i] / 255;\n      canvasContext.strokeStyle = '#FFC107';\n      canvasContext.moveTo(x1, y1);\n      canvasContext.lineTo(x2, y2);\n      canvasContext.stroke();\n    }\n\n    // Draw countdown value in the center\n    canvasContext.font = '256px \"Delicious Handrawn\"';\n    canvasContext.fillStyle = 'black';\n    canvasContext.textAlign = 'center';\n    canvasContext.textBaseline = 'middle';\n    canvasContext.fillText(countdownValue, centerX, centerY);\n  \n    animationFrameRef.current = requestAnimationFrame(draw);\n  };\n\n  useEffect(() => {\n    if (!animationFrameRef.current) {\n      animationFrameRef.current = requestAnimationFrame(draw);\n    }\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n        animationFrameRef.current = null;\n      }\n    };\n  }, [draw, countdownValue]);\n\n  const startVisualization = () => {\n    if (!animationFrameRef.current) {\n      draw();\n    }\n  };\n\n  const stopVisualization = () => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  };\n\n  return {\n    startVisualization,\n    stopVisualization\n  };\n};","import React, { useEffect, useRef } from 'react';\nimport { useAudioVisualizer } from '../hooks/useAudioVisualizer';\n\nconst AudioVisualizer = ({ isActive, countdownValue, size }) => {\n  const canvasRef = useRef(null);\n  const { startVisualization, stopVisualization } = useAudioVisualizer(canvasRef, countdownValue);\n\n  useEffect(() => {\n    if (isActive) {\n      startVisualization();\n    } else {\n      stopVisualization();\n    }\n  }, [isActive, startVisualization, stopVisualization]);\n\n  return <canvas ref={canvasRef} width={size} height={size}></canvas>;\n};\n\nexport default AudioVisualizer;\n\n","// src/components/ProgressBar.jsx\nimport React from \"react\";\nimport './ProgressBar.css';\n\nconst ProgressBar = ({ progress }) => {\n  return (\n    <div className=\"progress-bar\">\n      <div className=\"progress-bar-fill\" style={{ width: `${progress}%` }}></div>\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React, { useState, useEffect } from 'react';\nimport { useRequestMicPermission } from '../../hooks/useRequestMicPermission';\nimport { useHandleDecodingLogic } from '../../hooks/useHandleDecodingLogic';\nimport AudioVisualizer from '../../components/AudioVisualizer';\nimport { useCountdown } from '../../hooks/useCountdown';\nimport ProgressBar from '../../components/ProgressBar';\nimport './Decoding.css';\n\nconst Decoding = () => {\n  const [count, startCountdown, countdownPromise] = useCountdown();\n  const [hasMicPermission, requestMicPermission] = useRequestMicPermission();\n  const [isStarted, setIsStarted] = useState(false);\n  const [buttonActive, setButtonActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [retryMessage, setRetryMessage] = useState('');\n  const [speechResultReceived, setSpeechResultReceived] = useState(false);\n  const [nextDecodingWord, currentWord, isLastWord, progress] = useHandleDecodingLogic({ startCountdown, countdownPromise, setSpeechResultReceived, setRetryMessage, isPaused, setButtonActive });\n\n  useEffect(() => {\n    requestMicPermission();\n  }, [requestMicPermission]);\n\n  useEffect(() => {\n    if (!isStarted || count > 0) return \n      \n    if (!speechResultReceived) {\n      setIsPaused(true);\n      setTimeout(() => {\n        setIsPaused(false);\n      }, 1000);\n    }\n    if (speechResultReceived) {\n      setButtonActive(true);\n      setRetryMessage(''); \n    }\n    else {\n    setRetryMessage(\"We didn't quite catch that. Please try again.\");\n    setButtonActive(true);\n    } \n  }, [isStarted, speechResultReceived, count]);\n\n  useEffect(() => {\n    if (speechResultReceived) {\n      setButtonActive(true);   \n    }\n  }, [speechResultReceived]);\n\n  const startDecoding = async () => {\n    if (!hasMicPermission) {\n      await requestMicPermission();\n    }\n\n    if (hasMicPermission) {\n      setIsStarted(true);\n      nextDecodingWord();\n    }\n  };\n\n  return (\n    <div className=\"centered-content\">\n      <div className='decoding-page'>\n        <div className=\"decoding-content\">\n          {!isPaused && isStarted && !isLastWord && buttonActive ? (\n                  <div className=\"button-container\">\n                    <div>\n                      {retryMessage && <p>{retryMessage}</p>}\n                      <button onClick={nextDecodingWord}>{retryMessage ? 'Try Again' : 'Next Word'}</button>\n                    </div>\n                  </div>\n                ) : null }\n          {!isStarted && (\n                <div className=\"button-container\">\n                  <div>\n                  <button onClick={startDecoding}>Start</button>\n                  </div>\n                </div>\n              )}\n          {!buttonActive && isStarted && (\n                <>\n                  <p className='custom-p'>Say this word: </p>\n                  <h2 className='custom-h2'>{currentWord}</h2>\n                  <AudioVisualizer isActive={(true)} countdownValue={count} size=\"300\"/>\n                </>\n              )}\n        </div>\n        <ProgressBar progress={progress} />\n      </div>\n    </div>\n  );\n};\n\nexport default Decoding;\n","import { useState, useEffect } from 'react';\n\nexport const useCountdown = (interval = 1000) => {\n  const [count, setCount] = useState(null);\n  const [countdownFinished, setCountdownFinished] = useState(false);\n\n  useEffect(() => {\n    if (count === null) {\n      return;\n    }\n\n    if (count === 0) {\n      setCountdownFinished(true);\n      return;\n    }\n\n    const timer = setInterval(() => {\n      setCount((prevCount) => (prevCount > 0 ? prevCount - 1 : 0));\n    }, interval);\n\n    return () => clearInterval(timer);\n  }, [count, interval]);\n\n  const startCountdown = (initialValue) => {\n    setCount(initialValue);\n    setCountdownFinished(false);\n  };\n\n  const countdownPromise = () => {\n    return new Promise((resolve) => {\n      if (countdownFinished) {\n        resolve();\n      }\n      const unsubscribe = setInterval(() => {\n        if (countdownFinished) {\n          resolve();\n          clearInterval(unsubscribe);\n        }\n      }, interval);\n    });\n  };\n\n  return [count, startCountdown, countdownPromise];\n}\n","import { useState } from 'react';\n\nexport const useRequestMicPermission = () => {\n    const [hasMicPermission, setHasMicPermission] = useState(false);\n\n    const requestMicPermission = async () => {\n        try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        if (stream) {\n            setHasMicPermission(true);\n            stream.getTracks().forEach((track) => track.stop());\n        }\n        } catch (err) {\n        console.error('Error getting microphone access:', err);\n        alert('No microphone detected. Please connect a microphone to use this app.');\n        }\n    };\n    \n    return [hasMicPermission, requestMicPermission];\n};\n","/* eslint-disable eqeqeq */\n\nconst a = ['', 'one ', 'two ', 'three ', 'four ', 'five ', 'six ', 'seven ', 'eight ', 'nine ', 'ten ', 'eleven ', 'twelve ', 'thirteen ', 'fourteen ', 'fifteen ', 'sixteen ', 'seventeen ', 'eighteen ', 'nineteen ']\nconst b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n\nconst regex = /^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/\n\nconst getLT20 = (n) => a[Number(n)]\nconst getGT20 = (n) => b[n[0]] + ' ' + a[n[1]]\n\nmodule.exports = function numWords (input) {\n  const num = Number(input)\n  if (isNaN(num)) return ''\n  if (num === 0) return 'zero'\n\n  const numStr = num.toString()\n  if (numStr.length > 9) {\n    throw new Error('overflow') // Does not support converting more than 9 digits yet\n  }\n\n  const [, n1, n2, n3, n4, n5] = ('000000000' + numStr).substr(-9).match(regex) // left pad zeros\n\n  let str = ''\n  str += n1 != 0 ? (getLT20(n1) || getGT20(n1)) + 'crore ' : ''\n  str += n2 != 0 ? (getLT20(n2) || getGT20(n2)) + 'lakh ' : ''\n  str += n3 != 0 ? (getLT20(n3) || getGT20(n3)) + 'thousand ' : ''\n  str += n4 != 0 ? getLT20(n4) + 'hundred ' : ''\n  str += n5 != 0 && str != '' ? 'and ' : ''\n  str += n5 != 0 ? (getLT20(n5) || getGT20(n5)) : ''\n\n  return str.trim()\n}\n"],"names":["useSessionStorage","key","initialValue","storedValue","setStoredValue","useState","readValue","window","item","sessionStorage","getItem","JSON","parse","error","console","warn","concat","value","newValue","Function","setItem","stringify","dispatchEvent","Event","input","replace","number","numWords","useHandleDecodingLogic","_ref","startCountdown","countdownPromise","setSpeechResultReceived","setRetryMessage","isPaused","setButtonActive","navigate","useNavigate","testWords","setTestWords","wordIndex","setWordIndex","levelIndex","setLevelIndex","correct","setCorrect","wrong","setWrong","wrongAboveCurrentLevel","setWrongAboveCurrentLevel","frozenWrongAboveCurrentLevel","setFrozenWrongAboveCurrentLevel","isLastWord","setIsLastWord","readingLevel","setReadingLevel","currentLevel","setCurrentLevel","level","words","setWords","Object","keys","currentWord","setCurrentWord","lastLevelIndex","length","lastWordIndex","speechRecognition","useSpeechRecognition","recognition","useRef","useEffect","current","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","continuous","lang","interimResults","maxAlternatives","recognizeSpeech","Promise","resolve","reject","onresult","event","speechResult","results","transcript","onerror","start","Error","stopSpeechRecognition","stop","useMemo","totalWords","reduce","total","progress","prevWords","newWords","handleLogic","useCallback","prevState","log","async","speechRecognitionPromise","speechReturn","all","convertNumberToWords","toLowerCase","isCorrect","updatedCorrect","updatedWrong","prevWrongAboveCurrentLevel","useAudioVisualizer","canvasRef","countdownValue","analyser","setAnalyser","animationFrameRef","stream","setStream","audioContext","AudioContext","webkitAudioContext","newAnalyser","createAnalyser","navigator","mediaDevices","getUserMedia","audio","createMediaStreamSource","connect","getAudioContext","getAudioTracks","forEach","track","draw","canvasContext","getContext","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","clearRect","width","height","radius","Math","min","centerX","centerY","numBars","angleBetweenBars","PI","i","barHeight","barWidth","angle","x1","cos","y1","sin","x2","y2","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","font","fillStyle","textAlign","textBaseline","fillText","requestAnimationFrame","cancelAnimationFrame","startVisualization","stopVisualization","isActive","size","_jsx","ref","className","children","style","Decoding","count","interval","arguments","undefined","setCount","countdownFinished","setCountdownFinished","timer","setInterval","prevCount","clearInterval","unsubscribe","useCountdown","hasMicPermission","requestMicPermission","useRequestMicPermission","setHasMicPermission","getTracks","err","alert","isStarted","setIsStarted","buttonActive","setIsPaused","retryMessage","speechResultReceived","nextDecodingWord","setTimeout","_jsxs","onClick","_Fragment","AudioVisualizer","ProgressBar","a","b","regex","getLT20","n","Number","getGT20","module","exports","num","isNaN","numStr","toString","n1","n2","n3","n4","n5","substr","match","str","trim"],"sourceRoot":""}